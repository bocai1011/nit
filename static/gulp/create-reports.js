'use strict';

var gulp = require('gulp');
var $ = require('gulp-load-plugins')({
  pattern: ['gulp-*']
});

var fs   = require('fs');
var path = require('path');

var prefix = 'reports/pages/report-pages';
var pathToReportsDir = path.resolve(
    __dirname,
    '..',
    'src/modules',
    prefix
);

gulp.task('create-reports', function () {

    var reportsList = getReportsListSansLegacy();

    // Build and join the list of reports into a string.
    reportsList = reportsList.map(function (report) {
        report = report.replace('.js', '');
        return '    \'' + path.posix.join(prefix, report) + '\'';
    });

    reportsList = reportsList.join(',\n') + ',\n';

    // Build up the file's contents as a string.
    var createReports = '\'use strict\';\n\n';
    var now = new Date();
    var date = now.toDateString();
    var time = now.toTimeString();
    createReports += '// This file was autogenerated at ' + time;
    createReports += '\n// on ' + date + '.\n\n';
    createReports += 'define([\n';
    createReports += reportsList;
    createReports += '    \'reports/utils/LegacyReportMaker\',\n';
    createReports += '], function () {});\n'

    // Create the file.
    return $.file('CreateReports.js', createReports, { src: true })
            .pipe(gulp.dest('src/modules/reports/utils'));
});

gulp.task('build-report-list', function () {

    /**
     * Build up a list of handles to new NEAT3 report pages.
     */

    // Build a massive array of the contents of all the new NEAT3 report pages.
    var reportsList = getReportsListSansLegacy();
    var allContents = reportsList.map(function (report) {
        return readFile(path.join(pathToReportsDir, report));
    });

    // Extract just the displayNames from those contents.
    var displayNames = allContents.map(function (contents) {
        var displayNameRE = /displayName:\s*['"]([^'"]+)['"]/g;
        return displayNameRE.exec(contents)[1];
    });

    // Transform the displayNames into URL handles, the same way it's done in
    // ReportHelper.makeReport().
    var neatReportHandles = displayNames.map(function (name) {
        name = name.replace(/[^\w]+/g, '-')
                   .replace(/--+/g, '-')
                   .replace(/-$/g, '');
        return '\'' + name + '\',';
    });

    /**
     * Build up a list of handles to *legacy* report pages.
     */

    // Read the file that lists all the legacy reports.
    var legacyReports = readFile(
        path.join(pathToReportsDir, 'LegacyReports.js')
    );

    // Strip out the comment blocks from the legacy reports file before parsing
    // out the handles.
    legacyReports = legacyReports.replace(/\/\*[^]*?\*\//g, '');

    // Extract all their displayNames and transform them into URL handles.
    var legacyReportHandles = [];
    var match;
    var displayNameRE = /displayName:\s*['"]([^'"]+)['"]/g;
    while (match = displayNameRE.exec(legacyReports)) {
        var displayName = match[1];
        var handle = displayName.replace(/[^\w]+/g, '-')
                                .replace(/--+/g, '-')
                                .replace(/-$/g, '');
        handle = '\'' + handle + '\',';
        legacyReportHandles.push(handle);
    }

    var destination = '../selenium/pages';

    var now = new Date();
    var date = now.toDateString();
    var time = now.toTimeString();

    var reportListPy = '# All of NEAT\'s reports, separated into two lists:\n';
    reportListPy += '# (1) The new NEAT reports\n';
    reportListPy += '# (2) The NEAT2 legacy reports\n\n';

    reportListPy += '# This file was autogenerated at ' + time;
    reportListPy += '\n# on ' + date + '.\n\n';

    reportListPy += 'neat_reports = [\n    ';
    reportListPy += neatReportHandles.join('\n    ');
    reportListPy += '\n]\n\n';

    reportListPy += 'legacy_reports = [\n    ';
    reportListPy += legacyReportHandles.join('\n    ');
    reportListPy += '\n]\n';

    // Create the file for the Selenium tests.
    return $.file('report_list.py', reportListPy, { src: true })
            .pipe(gulp.dest(destination));

});

function getReportsListSansLegacy() {
    //var reportsList = fs.readdirSync(pathToReportsDir);
    var reportsList = recursiveReaddirSync(pathToReportsDir);

    // Remove LegacyReports from the list.
    var legacyIndex = reportsList.indexOf('LegacyReports.js');
    reportsList.splice(legacyIndex, 1);
    
    return reportsList;
}

function recursiveReaddirSync(dir) {
    var list = _recursiveReaddirSync(dir);
    
    list = list.map(function(fullPath) {
        return fullPath.replace(dir + '\\', '').replace('\\', '/');
    });
    
    return list;
}

function _recursiveReaddirSync(dir) {
    var
        stats,
        list = [],
        files = fs.readdirSync(dir);
        
    files.forEach(function (file) {
        stats = fs.lstatSync(path.join(dir, file));

        if(stats.isDirectory()) {
            list = list.concat(_recursiveReaddirSync(path.join(dir, file)));
        } else {
            list.push(path.join(dir, file));
        }
    });

    return list;
}

function readFile(path) {
    return fs.readFileSync(path, 'utf8');
}
